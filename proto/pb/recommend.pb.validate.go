// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: proto/recommend.proto

package pb

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on RecommendationCreateUserCommand with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RecommendationCreateUserCommand) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RecommendationCreateUserCommand with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// RecommendationCreateUserCommandMultiError, or nil if none found.
func (m *RecommendationCreateUserCommand) ValidateAll() error {
	return m.validate(true)
}

func (m *RecommendationCreateUserCommand) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	// no validation rules for Comment

	if len(errors) > 0 {
		return RecommendationCreateUserCommandMultiError(errors)
	}

	return nil
}

// RecommendationCreateUserCommandMultiError is an error wrapping multiple
// validation errors returned by RecommendationCreateUserCommand.ValidateAll()
// if the designated constraints aren't met.
type RecommendationCreateUserCommandMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RecommendationCreateUserCommandMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RecommendationCreateUserCommandMultiError) AllErrors() []error { return m }

// RecommendationCreateUserCommandValidationError is the validation error
// returned by RecommendationCreateUserCommand.Validate if the designated
// constraints aren't met.
type RecommendationCreateUserCommandValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RecommendationCreateUserCommandValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RecommendationCreateUserCommandValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RecommendationCreateUserCommandValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RecommendationCreateUserCommandValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RecommendationCreateUserCommandValidationError) ErrorName() string {
	return "RecommendationCreateUserCommandValidationError"
}

// Error satisfies the builtin error interface
func (e RecommendationCreateUserCommandValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRecommendationCreateUserCommand.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RecommendationCreateUserCommandValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RecommendationCreateUserCommandValidationError{}

// Validate checks the field values on RecommendationSuggestUserProjectCommand
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *RecommendationSuggestUserProjectCommand) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// RecommendationSuggestUserProjectCommand with the rules defined in the proto
// definition for this message. If any rules are violated, the result is a
// list of violation errors wrapped in
// RecommendationSuggestUserProjectCommandMultiError, or nil if none found.
func (m *RecommendationSuggestUserProjectCommand) ValidateAll() error {
	return m.validate(true)
}

func (m *RecommendationSuggestUserProjectCommand) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	if len(errors) > 0 {
		return RecommendationSuggestUserProjectCommandMultiError(errors)
	}

	return nil
}

// RecommendationSuggestUserProjectCommandMultiError is an error wrapping
// multiple validation errors returned by
// RecommendationSuggestUserProjectCommand.ValidateAll() if the designated
// constraints aren't met.
type RecommendationSuggestUserProjectCommandMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RecommendationSuggestUserProjectCommandMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RecommendationSuggestUserProjectCommandMultiError) AllErrors() []error { return m }

// RecommendationSuggestUserProjectCommandValidationError is the validation
// error returned by RecommendationSuggestUserProjectCommand.Validate if the
// designated constraints aren't met.
type RecommendationSuggestUserProjectCommandValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RecommendationSuggestUserProjectCommandValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RecommendationSuggestUserProjectCommandValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RecommendationSuggestUserProjectCommandValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RecommendationSuggestUserProjectCommandValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RecommendationSuggestUserProjectCommandValidationError) ErrorName() string {
	return "RecommendationSuggestUserProjectCommandValidationError"
}

// Error satisfies the builtin error interface
func (e RecommendationSuggestUserProjectCommandValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRecommendationSuggestUserProjectCommand.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RecommendationSuggestUserProjectCommandValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RecommendationSuggestUserProjectCommandValidationError{}

// Validate checks the field values on RecommendationCreateProjectCommand with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *RecommendationCreateProjectCommand) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RecommendationCreateProjectCommand
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// RecommendationCreateProjectCommandMultiError, or nil if none found.
func (m *RecommendationCreateProjectCommand) ValidateAll() error {
	return m.validate(true)
}

func (m *RecommendationCreateProjectCommand) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	if len(errors) > 0 {
		return RecommendationCreateProjectCommandMultiError(errors)
	}

	return nil
}

// RecommendationCreateProjectCommandMultiError is an error wrapping multiple
// validation errors returned by
// RecommendationCreateProjectCommand.ValidateAll() if the designated
// constraints aren't met.
type RecommendationCreateProjectCommandMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RecommendationCreateProjectCommandMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RecommendationCreateProjectCommandMultiError) AllErrors() []error { return m }

// RecommendationCreateProjectCommandValidationError is the validation error
// returned by RecommendationCreateProjectCommand.Validate if the designated
// constraints aren't met.
type RecommendationCreateProjectCommandValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RecommendationCreateProjectCommandValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RecommendationCreateProjectCommandValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RecommendationCreateProjectCommandValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RecommendationCreateProjectCommandValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RecommendationCreateProjectCommandValidationError) ErrorName() string {
	return "RecommendationCreateProjectCommandValidationError"
}

// Error satisfies the builtin error interface
func (e RecommendationCreateProjectCommandValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRecommendationCreateProjectCommand.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RecommendationCreateProjectCommandValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RecommendationCreateProjectCommandValidationError{}

// Validate checks the field values on Feedback with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Feedback) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Feedback with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in FeedbackMultiError, or nil
// if none found.
func (m *Feedback) ValidateAll() error {
	return m.validate(true)
}

func (m *Feedback) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for FeedbackType

	// no validation rules for EmployeeId

	// no validation rules for ItemId

	if all {
		switch v := interface{}(m.GetTimestamp()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, FeedbackValidationError{
					field:  "Timestamp",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, FeedbackValidationError{
					field:  "Timestamp",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTimestamp()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return FeedbackValidationError{
				field:  "Timestamp",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return FeedbackMultiError(errors)
	}

	return nil
}

// FeedbackMultiError is an error wrapping multiple validation errors returned
// by Feedback.ValidateAll() if the designated constraints aren't met.
type FeedbackMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FeedbackMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FeedbackMultiError) AllErrors() []error { return m }

// FeedbackValidationError is the validation error returned by
// Feedback.Validate if the designated constraints aren't met.
type FeedbackValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FeedbackValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FeedbackValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FeedbackValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FeedbackValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FeedbackValidationError) ErrorName() string { return "FeedbackValidationError" }

// Error satisfies the builtin error interface
func (e FeedbackValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFeedback.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FeedbackValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FeedbackValidationError{}

// Validate checks the field values on RecommendationInsertFeedbackCommand with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *RecommendationInsertFeedbackCommand) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RecommendationInsertFeedbackCommand
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// RecommendationInsertFeedbackCommandMultiError, or nil if none found.
func (m *RecommendationInsertFeedbackCommand) ValidateAll() error {
	return m.validate(true)
}

func (m *RecommendationInsertFeedbackCommand) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetFeedback()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RecommendationInsertFeedbackCommandValidationError{
					field:  "Feedback",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RecommendationInsertFeedbackCommandValidationError{
					field:  "Feedback",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetFeedback()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RecommendationInsertFeedbackCommandValidationError{
				field:  "Feedback",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return RecommendationInsertFeedbackCommandMultiError(errors)
	}

	return nil
}

// RecommendationInsertFeedbackCommandMultiError is an error wrapping multiple
// validation errors returned by
// RecommendationInsertFeedbackCommand.ValidateAll() if the designated
// constraints aren't met.
type RecommendationInsertFeedbackCommandMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RecommendationInsertFeedbackCommandMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RecommendationInsertFeedbackCommandMultiError) AllErrors() []error { return m }

// RecommendationInsertFeedbackCommandValidationError is the validation error
// returned by RecommendationInsertFeedbackCommand.Validate if the designated
// constraints aren't met.
type RecommendationInsertFeedbackCommandValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RecommendationInsertFeedbackCommandValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RecommendationInsertFeedbackCommandValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RecommendationInsertFeedbackCommandValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RecommendationInsertFeedbackCommandValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RecommendationInsertFeedbackCommandValidationError) ErrorName() string {
	return "RecommendationInsertFeedbackCommandValidationError"
}

// Error satisfies the builtin error interface
func (e RecommendationInsertFeedbackCommandValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRecommendationInsertFeedbackCommand.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RecommendationInsertFeedbackCommandValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RecommendationInsertFeedbackCommandValidationError{}
