// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: api/query.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// QueriesClient is the client API for Queries service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type QueriesClient interface {
	AllProjects(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*AllProjectsReply, error)
	AllBench(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*AllBenchReply, error)
}

type queriesClient struct {
	cc grpc.ClientConnInterface
}

func NewQueriesClient(cc grpc.ClientConnInterface) QueriesClient {
	return &queriesClient{cc}
}

func (c *queriesClient) AllProjects(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*AllProjectsReply, error) {
	out := new(AllProjectsReply)
	err := c.cc.Invoke(ctx, "/Queries/AllProjects", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queriesClient) AllBench(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*AllBenchReply, error) {
	out := new(AllBenchReply)
	err := c.cc.Invoke(ctx, "/Queries/AllBench", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueriesServer is the server API for Queries service.
// All implementations must embed UnimplementedQueriesServer
// for forward compatibility
type QueriesServer interface {
	AllProjects(context.Context, *emptypb.Empty) (*AllProjectsReply, error)
	AllBench(context.Context, *emptypb.Empty) (*AllBenchReply, error)
	mustEmbedUnimplementedQueriesServer()
}

// UnimplementedQueriesServer must be embedded to have forward compatible implementations.
type UnimplementedQueriesServer struct {
}

func (UnimplementedQueriesServer) AllProjects(context.Context, *emptypb.Empty) (*AllProjectsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AllProjects not implemented")
}
func (UnimplementedQueriesServer) AllBench(context.Context, *emptypb.Empty) (*AllBenchReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AllBench not implemented")
}
func (UnimplementedQueriesServer) mustEmbedUnimplementedQueriesServer() {}

// UnsafeQueriesServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to QueriesServer will
// result in compilation errors.
type UnsafeQueriesServer interface {
	mustEmbedUnimplementedQueriesServer()
}

func RegisterQueriesServer(s grpc.ServiceRegistrar, srv QueriesServer) {
	s.RegisterService(&Queries_ServiceDesc, srv)
}

func _Queries_AllProjects_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueriesServer).AllProjects(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Queries/AllProjects",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueriesServer).AllProjects(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Queries_AllBench_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueriesServer).AllBench(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Queries/AllBench",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueriesServer).AllBench(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// Queries_ServiceDesc is the grpc.ServiceDesc for Queries service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Queries_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Queries",
	HandlerType: (*QueriesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AllProjects",
			Handler:    _Queries_AllProjects_Handler,
		},
		{
			MethodName: "AllBench",
			Handler:    _Queries_AllBench_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/query.proto",
}
